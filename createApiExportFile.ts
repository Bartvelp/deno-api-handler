import { walk } from "https://deno.land/std@0.150.0/fs/walk.ts";
import { toFileUrl, resolve, join } from "https://deno.land/std@0.144.0/path/mod.ts";

export async function createApiExportFile(apiDirPath: string) {
  apiDirPath = resolve(apiDirPath)
  const apiEndpoints = []
  try {
    const apiDirUrl = toFileUrl(apiDirPath);
    // TODO(lucacasonato): remove the extranious Deno.readDir when
    // https://github.com/denoland/deno_std/issues/1310 is fixed.
    for await (const _ of Deno.readDir(apiDirUrl)) {
      // do nothing
    }
    const routesFolder = walk(apiDirPath, {
      includeDirs: false,
      includeFiles: true,
      exts: ["ts", "js"],
    });
  
    for await (const entry of routesFolder) {
      if (entry.isFile) {
        const file = toFileUrl(entry.path).href.substring(
          apiDirUrl.href.length,
        );
        apiEndpoints.push(file);
      }
    }
  } catch (err) {
    if (err instanceof Deno.errors.NotFound) {
      // Do nothing.
    } else {
      throw err;
    }
  }
  apiEndpoints.sort();
  console.log(apiEndpoints, apiEndpoints.filter(e => e !== '/_apiExports.ts'))
  await generate(join(apiDirPath, './_apiExports.ts'), apiEndpoints.filter(e => e !== '/_apiExports.ts'))
}


export async function generate(apiExportFilePath: string, endpoints: string[]) {
  const output = `// DO NOT EDIT. This file is automatically generated by the API handler development script.
// This file SHOULD be checked into source version control.
${
    endpoints.map((file, i) => `import * as $${i} from "./api${file}";`).join(
      "\n",
    )
  }

const manifest = {
  endpoints: {
    ${
    endpoints.map((file, i) => `${JSON.stringify(`./api${file}`)}: $${i},`)
      .join("\n    ")
  }
  },
  baseUrl: import.meta.url,
  config,
};
export default manifest;
`;

  console.log(output)
  const proc = Deno.run({
    cmd: [Deno.execPath(), "fmt", "-"],
    stdin: "piped",
    stdout: "piped",
    stderr: "null",
  });
  const raw = new ReadableStream({
    start(controller) {
      controller.enqueue(new TextEncoder().encode(output));
      controller.close();
    },
  });
  await raw.pipeTo(proc.stdin.writable);
  const out = await proc.output();
  await proc.status();
  proc.close();

  const manifestStr = new TextDecoder().decode(out);

  await Deno.writeTextFile(apiExportFilePath, manifestStr);
  console.log(
    `%cThe manifest has been generated for ${endpoints.length} endpoints.`,
    "color: blue; font-weight: bold",
  );
}
